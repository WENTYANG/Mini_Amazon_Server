// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AUprotocolV3.proto

#include "AUprotocolV3.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR Err::Err(
    ::_pbi::ConstantInitialized)
  : err_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , originseqnum_(int64_t{0})
  , seqnum_(int64_t{0}){}
struct ErrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ErrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ErrDefaultTypeInternal() {}
  union {
    Err _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ErrDefaultTypeInternal _Err_default_instance_;
PROTOBUF_CONSTEXPR AOrderATruck::AOrderATruck(
    ::_pbi::ConstantInitialized)
  : upsid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , packageid_(int64_t{0})
  , warehouselocationx_(0)
  , warehouselocationy_(0)
  , warehouseid_(0)
  , destinationx_(0)
  , seqnum_(int64_t{0})
  , destinationy_(0){}
struct AOrderATruckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AOrderATruckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AOrderATruckDefaultTypeInternal() {}
  union {
    AOrderATruck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AOrderATruckDefaultTypeInternal _AOrderATruck_default_instance_;
PROTOBUF_CONSTEXPR AStartDeliver::AStartDeliver(
    ::_pbi::ConstantInitialized)
  : packageid_(int64_t{0})
  , seqnum_(int64_t{0}){}
struct AStartDeliverDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AStartDeliverDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AStartDeliverDefaultTypeInternal() {}
  union {
    AStartDeliver _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AStartDeliverDefaultTypeInternal _AStartDeliver_default_instance_;
PROTOBUF_CONSTEXPR AUCommand::AUCommand(
    ::_pbi::ConstantInitialized)
  : deliver_()
  , order_()
  , acks_()
  , error_(){}
struct AUCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AUCommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AUCommandDefaultTypeInternal() {}
  union {
    AUCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AUCommandDefaultTypeInternal _AUCommand_default_instance_;
PROTOBUF_CONSTEXPR AUResponse::AUResponse(
    ::_pbi::ConstantInitialized)
  : arrive_()
  , delivered_()
  , acks_()
  , error_(){}
struct AUResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AUResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AUResponseDefaultTypeInternal() {}
  union {
    AUResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AUResponseDefaultTypeInternal _AUResponse_default_instance_;
PROTOBUF_CONSTEXPR UTruckArrive::UTruckArrive(
    ::_pbi::ConstantInitialized)
  : seqnum_()
  , packageid_(int64_t{0})
  , truckid_(0){}
struct UTruckArriveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UTruckArriveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UTruckArriveDefaultTypeInternal() {}
  union {
    UTruckArrive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UTruckArriveDefaultTypeInternal _UTruckArrive_default_instance_;
PROTOBUF_CONSTEXPR UDelivered::UDelivered(
    ::_pbi::ConstantInitialized)
  : packageid_(int64_t{0})
  , seqnum_(int64_t{0}){}
struct UDeliveredDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UDeliveredDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UDeliveredDefaultTypeInternal() {}
  union {
    UDelivered _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UDeliveredDefaultTypeInternal _UDelivered_default_instance_;
PROTOBUF_CONSTEXPR UACommand::UACommand(
    ::_pbi::ConstantInitialized)
  : arrive_()
  , delivered_()
  , acks_()
  , error_(){}
struct UACommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UACommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UACommandDefaultTypeInternal() {}
  union {
    UACommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UACommandDefaultTypeInternal _UACommand_default_instance_;
PROTOBUF_CONSTEXPR UAResponse::UAResponse(
    ::_pbi::ConstantInitialized)
  : deliver_()
  , order_()
  , acks_()
  , error_(){}
struct UAResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UAResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UAResponseDefaultTypeInternal() {}
  union {
    UAResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UAResponseDefaultTypeInternal _UAResponse_default_instance_;
static ::_pb::Metadata file_level_metadata_AUprotocolV3_2eproto[9];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_AUprotocolV3_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_AUprotocolV3_2eproto = nullptr;

const uint32_t TableStruct_AUprotocolV3_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Err, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Err, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Err, err_),
  PROTOBUF_FIELD_OFFSET(::Err, originseqnum_),
  PROTOBUF_FIELD_OFFSET(::Err, seqnum_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::AOrderATruck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AOrderATruck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AOrderATruck, packageid_),
  PROTOBUF_FIELD_OFFSET(::AOrderATruck, warehouselocationx_),
  PROTOBUF_FIELD_OFFSET(::AOrderATruck, warehouselocationy_),
  PROTOBUF_FIELD_OFFSET(::AOrderATruck, warehouseid_),
  PROTOBUF_FIELD_OFFSET(::AOrderATruck, destinationx_),
  PROTOBUF_FIELD_OFFSET(::AOrderATruck, destinationy_),
  PROTOBUF_FIELD_OFFSET(::AOrderATruck, upsid_),
  PROTOBUF_FIELD_OFFSET(::AOrderATruck, seqnum_),
  1,
  2,
  3,
  4,
  5,
  7,
  0,
  6,
  PROTOBUF_FIELD_OFFSET(::AStartDeliver, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AStartDeliver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AStartDeliver, packageid_),
  PROTOBUF_FIELD_OFFSET(::AStartDeliver, seqnum_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AUCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AUCommand, deliver_),
  PROTOBUF_FIELD_OFFSET(::AUCommand, order_),
  PROTOBUF_FIELD_OFFSET(::AUCommand, acks_),
  PROTOBUF_FIELD_OFFSET(::AUCommand, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AUResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AUResponse, arrive_),
  PROTOBUF_FIELD_OFFSET(::AUResponse, delivered_),
  PROTOBUF_FIELD_OFFSET(::AUResponse, acks_),
  PROTOBUF_FIELD_OFFSET(::AUResponse, error_),
  PROTOBUF_FIELD_OFFSET(::UTruckArrive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UTruckArrive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UTruckArrive, packageid_),
  PROTOBUF_FIELD_OFFSET(::UTruckArrive, truckid_),
  PROTOBUF_FIELD_OFFSET(::UTruckArrive, seqnum_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::UDelivered, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UDelivered, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UDelivered, packageid_),
  PROTOBUF_FIELD_OFFSET(::UDelivered, seqnum_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UACommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UACommand, arrive_),
  PROTOBUF_FIELD_OFFSET(::UACommand, delivered_),
  PROTOBUF_FIELD_OFFSET(::UACommand, acks_),
  PROTOBUF_FIELD_OFFSET(::UACommand, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UAResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UAResponse, deliver_),
  PROTOBUF_FIELD_OFFSET(::UAResponse, order_),
  PROTOBUF_FIELD_OFFSET(::UAResponse, acks_),
  PROTOBUF_FIELD_OFFSET(::UAResponse, error_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::Err)},
  { 12, 26, -1, sizeof(::AOrderATruck)},
  { 34, 42, -1, sizeof(::AStartDeliver)},
  { 44, -1, -1, sizeof(::AUCommand)},
  { 54, -1, -1, sizeof(::AUResponse)},
  { 64, 73, -1, sizeof(::UTruckArrive)},
  { 76, 84, -1, sizeof(::UDelivered)},
  { 86, -1, -1, sizeof(::UACommand)},
  { 96, -1, -1, sizeof(::UAResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_Err_default_instance_._instance,
  &::_AOrderATruck_default_instance_._instance,
  &::_AStartDeliver_default_instance_._instance,
  &::_AUCommand_default_instance_._instance,
  &::_AUResponse_default_instance_._instance,
  &::_UTruckArrive_default_instance_._instance,
  &::_UDelivered_default_instance_._instance,
  &::_UACommand_default_instance_._instance,
  &::_UAResponse_default_instance_._instance,
};

const char descriptor_table_protodef_AUprotocolV3_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022AUprotocolV3.proto\"8\n\003Err\022\013\n\003err\030\001 \002(\t"
  "\022\024\n\014originseqnum\030\002 \002(\003\022\016\n\006seqnum\030\003 \002(\003\"\271"
  "\001\n\014AOrderATruck\022\021\n\tpackageid\030\001 \002(\003\022\032\n\022wa"
  "rehouselocationx\030\002 \002(\005\022\032\n\022warehouselocat"
  "iony\030\003 \002(\005\022\023\n\013warehouseid\030\004 \002(\005\022\024\n\014desti"
  "nationx\030\005 \002(\005\022\024\n\014destinationy\030\006 \002(\005\022\r\n\005u"
  "psid\030\007 \001(\t\022\016\n\006seqnum\030\010 \002(\003\"2\n\rAStartDeli"
  "ver\022\021\n\tpackageid\030\001 \002(\003\022\016\n\006seqnum\030\002 \002(\003\"m"
  "\n\tAUCommand\022\037\n\007deliver\030\001 \003(\0132\016.AStartDel"
  "iver\022\034\n\005order\030\002 \003(\0132\r.AOrderATruck\022\014\n\004ac"
  "ks\030\003 \003(\003\022\023\n\005error\030\004 \003(\0132\004.Err\"n\n\nAURespo"
  "nse\022\035\n\006arrive\030\001 \003(\0132\r.UTruckArrive\022\036\n\tde"
  "livered\030\002 \003(\0132\013.UDelivered\022\014\n\004acks\030\003 \003(\003"
  "\022\023\n\005error\030\004 \003(\0132\004.Err\"B\n\014UTruckArrive\022\021\n"
  "\tpackageid\030\001 \002(\003\022\017\n\007truckid\030\002 \002(\005\022\016\n\006seq"
  "num\030\003 \003(\003\"/\n\nUDelivered\022\021\n\tpackageid\030\001 \002"
  "(\003\022\016\n\006seqnum\030\002 \002(\003\"m\n\tUACommand\022\035\n\006arriv"
  "e\030\001 \003(\0132\r.UTruckArrive\022\036\n\tdelivered\030\002 \003("
  "\0132\013.UDelivered\022\014\n\004acks\030\003 \003(\003\022\023\n\005error\030\004 "
  "\003(\0132\004.Err\"n\n\nUAResponse\022\037\n\007deliver\030\001 \003(\013"
  "2\016.AStartDeliver\022\034\n\005order\030\002 \003(\0132\r.AOrder"
  "ATruck\022\014\n\004acks\030\003 \003(\003\022\023\n\005error\030\004 \003(\0132\004.Er"
  "r"
  ;
static ::_pbi::once_flag descriptor_table_AUprotocolV3_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_AUprotocolV3_2eproto = {
    false, false, 881, descriptor_table_protodef_AUprotocolV3_2eproto,
    "AUprotocolV3.proto",
    &descriptor_table_AUprotocolV3_2eproto_once, nullptr, 0, 9,
    schemas, file_default_instances, TableStruct_AUprotocolV3_2eproto::offsets,
    file_level_metadata_AUprotocolV3_2eproto, file_level_enum_descriptors_AUprotocolV3_2eproto,
    file_level_service_descriptors_AUprotocolV3_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_AUprotocolV3_2eproto_getter() {
  return &descriptor_table_AUprotocolV3_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_AUprotocolV3_2eproto(&descriptor_table_AUprotocolV3_2eproto);

// ===================================================================

class Err::_Internal {
 public:
  using HasBits = decltype(std::declval<Err>()._has_bits_);
  static void set_has_err(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_originseqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

Err::Err(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Err)
}
Err::Err(const Err& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    err_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_err()) {
    err_.Set(from._internal_err(), 
      GetArenaForAllocation());
  }
  ::memcpy(&originseqnum_, &from.originseqnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&originseqnum_)) + sizeof(seqnum_));
  // @@protoc_insertion_point(copy_constructor:Err)
}

inline void Err::SharedCtor() {
err_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  err_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&originseqnum_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&originseqnum_)) + sizeof(seqnum_));
}

Err::~Err() {
  // @@protoc_insertion_point(destructor:Err)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Err::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  err_.Destroy();
}

void Err::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Err::Clear() {
// @@protoc_insertion_point(message_clear_start:Err)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    err_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&originseqnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seqnum_) -
        reinterpret_cast<char*>(&originseqnum_)) + sizeof(seqnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Err::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string err = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_err();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "Err.err");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int64 originseqnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_originseqnum(&has_bits);
          originseqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 seqnum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Err::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Err)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string err = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_err().data(), static_cast<int>(this->_internal_err().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Err.err");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_err(), target);
  }

  // required int64 originseqnum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_originseqnum(), target);
  }

  // required int64 seqnum = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Err)
  return target;
}

size_t Err::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Err)
  size_t total_size = 0;

  if (_internal_has_err()) {
    // required string err = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err());
  }

  if (_internal_has_originseqnum()) {
    // required int64 originseqnum = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_originseqnum());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqnum = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());
  }

  return total_size;
}
size_t Err::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Err)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string err = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err());

    // required int64 originseqnum = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_originseqnum());

    // required int64 seqnum = 3;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Err::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Err::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Err::GetClassData() const { return &_class_data_; }

void Err::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Err *>(to)->MergeFrom(
      static_cast<const Err &>(from));
}


void Err::MergeFrom(const Err& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Err)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_err(from._internal_err());
    }
    if (cached_has_bits & 0x00000002u) {
      originseqnum_ = from.originseqnum_;
    }
    if (cached_has_bits & 0x00000004u) {
      seqnum_ = from.seqnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Err::CopyFrom(const Err& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Err)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Err::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Err::InternalSwap(Err* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &err_, lhs_arena,
      &other->err_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Err, seqnum_)
      + sizeof(Err::seqnum_)
      - PROTOBUF_FIELD_OFFSET(Err, originseqnum_)>(
          reinterpret_cast<char*>(&originseqnum_),
          reinterpret_cast<char*>(&other->originseqnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Err::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AUprotocolV3_2eproto_getter, &descriptor_table_AUprotocolV3_2eproto_once,
      file_level_metadata_AUprotocolV3_2eproto[0]);
}

// ===================================================================

class AOrderATruck::_Internal {
 public:
  using HasBits = decltype(std::declval<AOrderATruck>()._has_bits_);
  static void set_has_packageid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_warehouselocationx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_warehouselocationy(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_warehouseid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_destinationx(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_destinationy(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_upsid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000fe) ^ 0x000000fe) != 0;
  }
};

AOrderATruck::AOrderATruck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:AOrderATruck)
}
AOrderATruck::AOrderATruck(const AOrderATruck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  upsid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    upsid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_upsid()) {
    upsid_.Set(from._internal_upsid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&packageid_, &from.packageid_,
    static_cast<size_t>(reinterpret_cast<char*>(&destinationy_) -
    reinterpret_cast<char*>(&packageid_)) + sizeof(destinationy_));
  // @@protoc_insertion_point(copy_constructor:AOrderATruck)
}

inline void AOrderATruck::SharedCtor() {
upsid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  upsid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&packageid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&destinationy_) -
    reinterpret_cast<char*>(&packageid_)) + sizeof(destinationy_));
}

AOrderATruck::~AOrderATruck() {
  // @@protoc_insertion_point(destructor:AOrderATruck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AOrderATruck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  upsid_.Destroy();
}

void AOrderATruck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AOrderATruck::Clear() {
// @@protoc_insertion_point(message_clear_start:AOrderATruck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    upsid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&packageid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&destinationy_) -
        reinterpret_cast<char*>(&packageid_)) + sizeof(destinationy_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AOrderATruck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 packageid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_packageid(&has_bits);
          packageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 warehouselocationx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_warehouselocationx(&has_bits);
          warehouselocationx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 warehouselocationy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_warehouselocationy(&has_bits);
          warehouselocationy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 warehouseid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_warehouseid(&has_bits);
          warehouseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 destinationx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_destinationx(&has_bits);
          destinationx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 destinationy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_destinationy(&has_bits);
          destinationy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string upsid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_upsid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "AOrderATruck.upsid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int64 seqnum = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AOrderATruck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AOrderATruck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 packageid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_packageid(), target);
  }

  // required int32 warehouselocationx = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_warehouselocationx(), target);
  }

  // required int32 warehouselocationy = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_warehouselocationy(), target);
  }

  // required int32 warehouseid = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_warehouseid(), target);
  }

  // required int32 destinationx = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_destinationx(), target);
  }

  // required int32 destinationy = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_destinationy(), target);
  }

  // optional string upsid = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_upsid().data(), static_cast<int>(this->_internal_upsid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "AOrderATruck.upsid");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_upsid(), target);
  }

  // required int64 seqnum = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AOrderATruck)
  return target;
}

size_t AOrderATruck::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AOrderATruck)
  size_t total_size = 0;

  if (_internal_has_packageid()) {
    // required int64 packageid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_packageid());
  }

  if (_internal_has_warehouselocationx()) {
    // required int32 warehouselocationx = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_warehouselocationx());
  }

  if (_internal_has_warehouselocationy()) {
    // required int32 warehouselocationy = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_warehouselocationy());
  }

  if (_internal_has_warehouseid()) {
    // required int32 warehouseid = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_warehouseid());
  }

  if (_internal_has_destinationx()) {
    // required int32 destinationx = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_destinationx());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqnum = 8;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());
  }

  if (_internal_has_destinationy()) {
    // required int32 destinationy = 6;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_destinationy());
  }

  return total_size;
}
size_t AOrderATruck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AOrderATruck)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000fe) ^ 0x000000fe) == 0) {  // All required fields are present.
    // required int64 packageid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_packageid());

    // required int32 warehouselocationx = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_warehouselocationx());

    // required int32 warehouselocationy = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_warehouselocationy());

    // required int32 warehouseid = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_warehouseid());

    // required int32 destinationx = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_destinationx());

    // required int64 seqnum = 8;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());

    // required int32 destinationy = 6;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_destinationy());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string upsid = 7;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_upsid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AOrderATruck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AOrderATruck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AOrderATruck::GetClassData() const { return &_class_data_; }

void AOrderATruck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AOrderATruck *>(to)->MergeFrom(
      static_cast<const AOrderATruck &>(from));
}


void AOrderATruck::MergeFrom(const AOrderATruck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AOrderATruck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_upsid(from._internal_upsid());
    }
    if (cached_has_bits & 0x00000002u) {
      packageid_ = from.packageid_;
    }
    if (cached_has_bits & 0x00000004u) {
      warehouselocationx_ = from.warehouselocationx_;
    }
    if (cached_has_bits & 0x00000008u) {
      warehouselocationy_ = from.warehouselocationy_;
    }
    if (cached_has_bits & 0x00000010u) {
      warehouseid_ = from.warehouseid_;
    }
    if (cached_has_bits & 0x00000020u) {
      destinationx_ = from.destinationx_;
    }
    if (cached_has_bits & 0x00000040u) {
      seqnum_ = from.seqnum_;
    }
    if (cached_has_bits & 0x00000080u) {
      destinationy_ = from.destinationy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AOrderATruck::CopyFrom(const AOrderATruck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AOrderATruck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AOrderATruck::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AOrderATruck::InternalSwap(AOrderATruck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &upsid_, lhs_arena,
      &other->upsid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AOrderATruck, destinationy_)
      + sizeof(AOrderATruck::destinationy_)
      - PROTOBUF_FIELD_OFFSET(AOrderATruck, packageid_)>(
          reinterpret_cast<char*>(&packageid_),
          reinterpret_cast<char*>(&other->packageid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AOrderATruck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AUprotocolV3_2eproto_getter, &descriptor_table_AUprotocolV3_2eproto_once,
      file_level_metadata_AUprotocolV3_2eproto[1]);
}

// ===================================================================

class AStartDeliver::_Internal {
 public:
  using HasBits = decltype(std::declval<AStartDeliver>()._has_bits_);
  static void set_has_packageid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

AStartDeliver::AStartDeliver(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:AStartDeliver)
}
AStartDeliver::AStartDeliver(const AStartDeliver& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&packageid_, &from.packageid_,
    static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&packageid_)) + sizeof(seqnum_));
  // @@protoc_insertion_point(copy_constructor:AStartDeliver)
}

inline void AStartDeliver::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&packageid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&packageid_)) + sizeof(seqnum_));
}

AStartDeliver::~AStartDeliver() {
  // @@protoc_insertion_point(destructor:AStartDeliver)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AStartDeliver::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AStartDeliver::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AStartDeliver::Clear() {
// @@protoc_insertion_point(message_clear_start:AStartDeliver)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&packageid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seqnum_) -
        reinterpret_cast<char*>(&packageid_)) + sizeof(seqnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AStartDeliver::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 packageid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_packageid(&has_bits);
          packageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 seqnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AStartDeliver::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AStartDeliver)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 packageid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_packageid(), target);
  }

  // required int64 seqnum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AStartDeliver)
  return target;
}

size_t AStartDeliver::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AStartDeliver)
  size_t total_size = 0;

  if (_internal_has_packageid()) {
    // required int64 packageid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_packageid());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqnum = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());
  }

  return total_size;
}
size_t AStartDeliver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AStartDeliver)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 packageid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_packageid());

    // required int64 seqnum = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AStartDeliver::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AStartDeliver::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AStartDeliver::GetClassData() const { return &_class_data_; }

void AStartDeliver::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AStartDeliver *>(to)->MergeFrom(
      static_cast<const AStartDeliver &>(from));
}


void AStartDeliver::MergeFrom(const AStartDeliver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AStartDeliver)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      packageid_ = from.packageid_;
    }
    if (cached_has_bits & 0x00000002u) {
      seqnum_ = from.seqnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AStartDeliver::CopyFrom(const AStartDeliver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AStartDeliver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AStartDeliver::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AStartDeliver::InternalSwap(AStartDeliver* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AStartDeliver, seqnum_)
      + sizeof(AStartDeliver::seqnum_)
      - PROTOBUF_FIELD_OFFSET(AStartDeliver, packageid_)>(
          reinterpret_cast<char*>(&packageid_),
          reinterpret_cast<char*>(&other->packageid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AStartDeliver::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AUprotocolV3_2eproto_getter, &descriptor_table_AUprotocolV3_2eproto_once,
      file_level_metadata_AUprotocolV3_2eproto[2]);
}

// ===================================================================

class AUCommand::_Internal {
 public:
};

AUCommand::AUCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  deliver_(arena),
  order_(arena),
  acks_(arena),
  error_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:AUCommand)
}
AUCommand::AUCommand(const AUCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      deliver_(from.deliver_),
      order_(from.order_),
      acks_(from.acks_),
      error_(from.error_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AUCommand)
}

inline void AUCommand::SharedCtor() {
}

AUCommand::~AUCommand() {
  // @@protoc_insertion_point(destructor:AUCommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AUCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AUCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AUCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:AUCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deliver_.Clear();
  order_.Clear();
  acks_.Clear();
  error_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AUCommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .AStartDeliver deliver = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deliver(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .AOrderATruck order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_order(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 acks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_acks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_acks(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Err error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_error(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AUCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AUCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AStartDeliver deliver = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_deliver_size()); i < n; i++) {
    const auto& repfield = this->_internal_deliver(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .AOrderATruck order = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_order_size()); i < n; i++) {
    const auto& repfield = this->_internal_order(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int64 acks = 3;
  for (int i = 0, n = this->_internal_acks_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_acks(i), target);
  }

  // repeated .Err error = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_error_size()); i < n; i++) {
    const auto& repfield = this->_internal_error(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AUCommand)
  return target;
}

size_t AUCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AUCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AStartDeliver deliver = 1;
  total_size += 1UL * this->_internal_deliver_size();
  for (const auto& msg : this->deliver_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .AOrderATruck order = 2;
  total_size += 1UL * this->_internal_order_size();
  for (const auto& msg : this->order_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 acks = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->acks_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_acks_size());
    total_size += data_size;
  }

  // repeated .Err error = 4;
  total_size += 1UL * this->_internal_error_size();
  for (const auto& msg : this->error_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AUCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AUCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AUCommand::GetClassData() const { return &_class_data_; }

void AUCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AUCommand *>(to)->MergeFrom(
      static_cast<const AUCommand &>(from));
}


void AUCommand::MergeFrom(const AUCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AUCommand)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  deliver_.MergeFrom(from.deliver_);
  order_.MergeFrom(from.order_);
  acks_.MergeFrom(from.acks_);
  error_.MergeFrom(from.error_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AUCommand::CopyFrom(const AUCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AUCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AUCommand::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(deliver_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(order_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(error_))
    return false;
  return true;
}

void AUCommand::InternalSwap(AUCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  deliver_.InternalSwap(&other->deliver_);
  order_.InternalSwap(&other->order_);
  acks_.InternalSwap(&other->acks_);
  error_.InternalSwap(&other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AUCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AUprotocolV3_2eproto_getter, &descriptor_table_AUprotocolV3_2eproto_once,
      file_level_metadata_AUprotocolV3_2eproto[3]);
}

// ===================================================================

class AUResponse::_Internal {
 public:
};

AUResponse::AUResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  arrive_(arena),
  delivered_(arena),
  acks_(arena),
  error_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:AUResponse)
}
AUResponse::AUResponse(const AUResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arrive_(from.arrive_),
      delivered_(from.delivered_),
      acks_(from.acks_),
      error_(from.error_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AUResponse)
}

inline void AUResponse::SharedCtor() {
}

AUResponse::~AUResponse() {
  // @@protoc_insertion_point(destructor:AUResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AUResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AUResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AUResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:AUResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arrive_.Clear();
  delivered_.Clear();
  acks_.Clear();
  error_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AUResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .UTruckArrive arrive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arrive(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .UDelivered delivered = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delivered(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 acks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_acks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_acks(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Err error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_error(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AUResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AUResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .UTruckArrive arrive = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_arrive_size()); i < n; i++) {
    const auto& repfield = this->_internal_arrive(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .UDelivered delivered = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_delivered_size()); i < n; i++) {
    const auto& repfield = this->_internal_delivered(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int64 acks = 3;
  for (int i = 0, n = this->_internal_acks_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_acks(i), target);
  }

  // repeated .Err error = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_error_size()); i < n; i++) {
    const auto& repfield = this->_internal_error(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AUResponse)
  return target;
}

size_t AUResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AUResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .UTruckArrive arrive = 1;
  total_size += 1UL * this->_internal_arrive_size();
  for (const auto& msg : this->arrive_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .UDelivered delivered = 2;
  total_size += 1UL * this->_internal_delivered_size();
  for (const auto& msg : this->delivered_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 acks = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->acks_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_acks_size());
    total_size += data_size;
  }

  // repeated .Err error = 4;
  total_size += 1UL * this->_internal_error_size();
  for (const auto& msg : this->error_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AUResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AUResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AUResponse::GetClassData() const { return &_class_data_; }

void AUResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AUResponse *>(to)->MergeFrom(
      static_cast<const AUResponse &>(from));
}


void AUResponse::MergeFrom(const AUResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AUResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  arrive_.MergeFrom(from.arrive_);
  delivered_.MergeFrom(from.delivered_);
  acks_.MergeFrom(from.acks_);
  error_.MergeFrom(from.error_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AUResponse::CopyFrom(const AUResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AUResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AUResponse::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(arrive_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(delivered_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(error_))
    return false;
  return true;
}

void AUResponse::InternalSwap(AUResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  arrive_.InternalSwap(&other->arrive_);
  delivered_.InternalSwap(&other->delivered_);
  acks_.InternalSwap(&other->acks_);
  error_.InternalSwap(&other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AUResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AUprotocolV3_2eproto_getter, &descriptor_table_AUprotocolV3_2eproto_once,
      file_level_metadata_AUprotocolV3_2eproto[4]);
}

// ===================================================================

class UTruckArrive::_Internal {
 public:
  using HasBits = decltype(std::declval<UTruckArrive>()._has_bits_);
  static void set_has_packageid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_truckid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

UTruckArrive::UTruckArrive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  seqnum_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UTruckArrive)
}
UTruckArrive::UTruckArrive(const UTruckArrive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      seqnum_(from.seqnum_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&packageid_, &from.packageid_,
    static_cast<size_t>(reinterpret_cast<char*>(&truckid_) -
    reinterpret_cast<char*>(&packageid_)) + sizeof(truckid_));
  // @@protoc_insertion_point(copy_constructor:UTruckArrive)
}

inline void UTruckArrive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&packageid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&truckid_) -
    reinterpret_cast<char*>(&packageid_)) + sizeof(truckid_));
}

UTruckArrive::~UTruckArrive() {
  // @@protoc_insertion_point(destructor:UTruckArrive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UTruckArrive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UTruckArrive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UTruckArrive::Clear() {
// @@protoc_insertion_point(message_clear_start:UTruckArrive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seqnum_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&packageid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&truckid_) -
        reinterpret_cast<char*>(&packageid_)) + sizeof(truckid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UTruckArrive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 packageid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_packageid(&has_bits);
          packageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 truckid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_truckid(&has_bits);
          truckid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 seqnum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_seqnum(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_seqnum(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UTruckArrive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UTruckArrive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 packageid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_packageid(), target);
  }

  // required int32 truckid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_truckid(), target);
  }

  // repeated int64 seqnum = 3;
  for (int i = 0, n = this->_internal_seqnum_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_seqnum(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UTruckArrive)
  return target;
}

size_t UTruckArrive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UTruckArrive)
  size_t total_size = 0;

  if (_internal_has_packageid()) {
    // required int64 packageid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_packageid());
  }

  if (_internal_has_truckid()) {
    // required int32 truckid = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_truckid());
  }

  return total_size;
}
size_t UTruckArrive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UTruckArrive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 packageid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_packageid());

    // required int32 truckid = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_truckid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 seqnum = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->seqnum_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_seqnum_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UTruckArrive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UTruckArrive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UTruckArrive::GetClassData() const { return &_class_data_; }

void UTruckArrive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UTruckArrive *>(to)->MergeFrom(
      static_cast<const UTruckArrive &>(from));
}


void UTruckArrive::MergeFrom(const UTruckArrive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UTruckArrive)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  seqnum_.MergeFrom(from.seqnum_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      packageid_ = from.packageid_;
    }
    if (cached_has_bits & 0x00000002u) {
      truckid_ = from.truckid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UTruckArrive::CopyFrom(const UTruckArrive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UTruckArrive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UTruckArrive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UTruckArrive::InternalSwap(UTruckArrive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  seqnum_.InternalSwap(&other->seqnum_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UTruckArrive, truckid_)
      + sizeof(UTruckArrive::truckid_)
      - PROTOBUF_FIELD_OFFSET(UTruckArrive, packageid_)>(
          reinterpret_cast<char*>(&packageid_),
          reinterpret_cast<char*>(&other->packageid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UTruckArrive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AUprotocolV3_2eproto_getter, &descriptor_table_AUprotocolV3_2eproto_once,
      file_level_metadata_AUprotocolV3_2eproto[5]);
}

// ===================================================================

class UDelivered::_Internal {
 public:
  using HasBits = decltype(std::declval<UDelivered>()._has_bits_);
  static void set_has_packageid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seqnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

UDelivered::UDelivered(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UDelivered)
}
UDelivered::UDelivered(const UDelivered& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&packageid_, &from.packageid_,
    static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&packageid_)) + sizeof(seqnum_));
  // @@protoc_insertion_point(copy_constructor:UDelivered)
}

inline void UDelivered::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&packageid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seqnum_) -
    reinterpret_cast<char*>(&packageid_)) + sizeof(seqnum_));
}

UDelivered::~UDelivered() {
  // @@protoc_insertion_point(destructor:UDelivered)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UDelivered::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UDelivered::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UDelivered::Clear() {
// @@protoc_insertion_point(message_clear_start:UDelivered)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&packageid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seqnum_) -
        reinterpret_cast<char*>(&packageid_)) + sizeof(seqnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UDelivered::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 packageid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_packageid(&has_bits);
          packageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 seqnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_seqnum(&has_bits);
          seqnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UDelivered::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UDelivered)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 packageid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_packageid(), target);
  }

  // required int64 seqnum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_seqnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UDelivered)
  return target;
}

size_t UDelivered::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UDelivered)
  size_t total_size = 0;

  if (_internal_has_packageid()) {
    // required int64 packageid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_packageid());
  }

  if (_internal_has_seqnum()) {
    // required int64 seqnum = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());
  }

  return total_size;
}
size_t UDelivered::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UDelivered)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 packageid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_packageid());

    // required int64 seqnum = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seqnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UDelivered::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UDelivered::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UDelivered::GetClassData() const { return &_class_data_; }

void UDelivered::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UDelivered *>(to)->MergeFrom(
      static_cast<const UDelivered &>(from));
}


void UDelivered::MergeFrom(const UDelivered& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UDelivered)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      packageid_ = from.packageid_;
    }
    if (cached_has_bits & 0x00000002u) {
      seqnum_ = from.seqnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UDelivered::CopyFrom(const UDelivered& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UDelivered)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UDelivered::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UDelivered::InternalSwap(UDelivered* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UDelivered, seqnum_)
      + sizeof(UDelivered::seqnum_)
      - PROTOBUF_FIELD_OFFSET(UDelivered, packageid_)>(
          reinterpret_cast<char*>(&packageid_),
          reinterpret_cast<char*>(&other->packageid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UDelivered::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AUprotocolV3_2eproto_getter, &descriptor_table_AUprotocolV3_2eproto_once,
      file_level_metadata_AUprotocolV3_2eproto[6]);
}

// ===================================================================

class UACommand::_Internal {
 public:
};

UACommand::UACommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  arrive_(arena),
  delivered_(arena),
  acks_(arena),
  error_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UACommand)
}
UACommand::UACommand(const UACommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arrive_(from.arrive_),
      delivered_(from.delivered_),
      acks_(from.acks_),
      error_(from.error_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:UACommand)
}

inline void UACommand::SharedCtor() {
}

UACommand::~UACommand() {
  // @@protoc_insertion_point(destructor:UACommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UACommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UACommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UACommand::Clear() {
// @@protoc_insertion_point(message_clear_start:UACommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arrive_.Clear();
  delivered_.Clear();
  acks_.Clear();
  error_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UACommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .UTruckArrive arrive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arrive(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .UDelivered delivered = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delivered(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 acks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_acks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_acks(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Err error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_error(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UACommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UACommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .UTruckArrive arrive = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_arrive_size()); i < n; i++) {
    const auto& repfield = this->_internal_arrive(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .UDelivered delivered = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_delivered_size()); i < n; i++) {
    const auto& repfield = this->_internal_delivered(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int64 acks = 3;
  for (int i = 0, n = this->_internal_acks_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_acks(i), target);
  }

  // repeated .Err error = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_error_size()); i < n; i++) {
    const auto& repfield = this->_internal_error(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UACommand)
  return target;
}

size_t UACommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UACommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .UTruckArrive arrive = 1;
  total_size += 1UL * this->_internal_arrive_size();
  for (const auto& msg : this->arrive_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .UDelivered delivered = 2;
  total_size += 1UL * this->_internal_delivered_size();
  for (const auto& msg : this->delivered_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 acks = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->acks_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_acks_size());
    total_size += data_size;
  }

  // repeated .Err error = 4;
  total_size += 1UL * this->_internal_error_size();
  for (const auto& msg : this->error_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UACommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UACommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UACommand::GetClassData() const { return &_class_data_; }

void UACommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UACommand *>(to)->MergeFrom(
      static_cast<const UACommand &>(from));
}


void UACommand::MergeFrom(const UACommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UACommand)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  arrive_.MergeFrom(from.arrive_);
  delivered_.MergeFrom(from.delivered_);
  acks_.MergeFrom(from.acks_);
  error_.MergeFrom(from.error_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UACommand::CopyFrom(const UACommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UACommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UACommand::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(arrive_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(delivered_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(error_))
    return false;
  return true;
}

void UACommand::InternalSwap(UACommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  arrive_.InternalSwap(&other->arrive_);
  delivered_.InternalSwap(&other->delivered_);
  acks_.InternalSwap(&other->acks_);
  error_.InternalSwap(&other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UACommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AUprotocolV3_2eproto_getter, &descriptor_table_AUprotocolV3_2eproto_once,
      file_level_metadata_AUprotocolV3_2eproto[7]);
}

// ===================================================================

class UAResponse::_Internal {
 public:
};

UAResponse::UAResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  deliver_(arena),
  order_(arena),
  acks_(arena),
  error_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UAResponse)
}
UAResponse::UAResponse(const UAResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      deliver_(from.deliver_),
      order_(from.order_),
      acks_(from.acks_),
      error_(from.error_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:UAResponse)
}

inline void UAResponse::SharedCtor() {
}

UAResponse::~UAResponse() {
  // @@protoc_insertion_point(destructor:UAResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UAResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UAResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UAResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:UAResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deliver_.Clear();
  order_.Clear();
  acks_.Clear();
  error_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UAResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .AStartDeliver deliver = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deliver(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .AOrderATruck order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_order(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 acks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_acks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_acks(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Err error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_error(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UAResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UAResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AStartDeliver deliver = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_deliver_size()); i < n; i++) {
    const auto& repfield = this->_internal_deliver(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .AOrderATruck order = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_order_size()); i < n; i++) {
    const auto& repfield = this->_internal_order(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int64 acks = 3;
  for (int i = 0, n = this->_internal_acks_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_acks(i), target);
  }

  // repeated .Err error = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_error_size()); i < n; i++) {
    const auto& repfield = this->_internal_error(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UAResponse)
  return target;
}

size_t UAResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UAResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AStartDeliver deliver = 1;
  total_size += 1UL * this->_internal_deliver_size();
  for (const auto& msg : this->deliver_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .AOrderATruck order = 2;
  total_size += 1UL * this->_internal_order_size();
  for (const auto& msg : this->order_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 acks = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->acks_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_acks_size());
    total_size += data_size;
  }

  // repeated .Err error = 4;
  total_size += 1UL * this->_internal_error_size();
  for (const auto& msg : this->error_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UAResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UAResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UAResponse::GetClassData() const { return &_class_data_; }

void UAResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UAResponse *>(to)->MergeFrom(
      static_cast<const UAResponse &>(from));
}


void UAResponse::MergeFrom(const UAResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UAResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  deliver_.MergeFrom(from.deliver_);
  order_.MergeFrom(from.order_);
  acks_.MergeFrom(from.acks_);
  error_.MergeFrom(from.error_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UAResponse::CopyFrom(const UAResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UAResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UAResponse::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(deliver_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(order_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(error_))
    return false;
  return true;
}

void UAResponse::InternalSwap(UAResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  deliver_.InternalSwap(&other->deliver_);
  order_.InternalSwap(&other->order_);
  acks_.InternalSwap(&other->acks_);
  error_.InternalSwap(&other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UAResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_AUprotocolV3_2eproto_getter, &descriptor_table_AUprotocolV3_2eproto_once,
      file_level_metadata_AUprotocolV3_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Err*
Arena::CreateMaybeMessage< ::Err >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Err >(arena);
}
template<> PROTOBUF_NOINLINE ::AOrderATruck*
Arena::CreateMaybeMessage< ::AOrderATruck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AOrderATruck >(arena);
}
template<> PROTOBUF_NOINLINE ::AStartDeliver*
Arena::CreateMaybeMessage< ::AStartDeliver >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AStartDeliver >(arena);
}
template<> PROTOBUF_NOINLINE ::AUCommand*
Arena::CreateMaybeMessage< ::AUCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AUCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::AUResponse*
Arena::CreateMaybeMessage< ::AUResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AUResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::UTruckArrive*
Arena::CreateMaybeMessage< ::UTruckArrive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UTruckArrive >(arena);
}
template<> PROTOBUF_NOINLINE ::UDelivered*
Arena::CreateMaybeMessage< ::UDelivered >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UDelivered >(arena);
}
template<> PROTOBUF_NOINLINE ::UACommand*
Arena::CreateMaybeMessage< ::UACommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UACommand >(arena);
}
template<> PROTOBUF_NOINLINE ::UAResponse*
Arena::CreateMaybeMessage< ::UAResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UAResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
