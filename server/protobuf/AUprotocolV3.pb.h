// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AUprotocolV3.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_AUprotocolV3_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_AUprotocolV3_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_AUprotocolV3_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_AUprotocolV3_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AUprotocolV3_2eproto;
class AOrderATruck;
struct AOrderATruckDefaultTypeInternal;
extern AOrderATruckDefaultTypeInternal _AOrderATruck_default_instance_;
class AStartDeliver;
struct AStartDeliverDefaultTypeInternal;
extern AStartDeliverDefaultTypeInternal _AStartDeliver_default_instance_;
class AUCommand;
struct AUCommandDefaultTypeInternal;
extern AUCommandDefaultTypeInternal _AUCommand_default_instance_;
class AUResponse;
struct AUResponseDefaultTypeInternal;
extern AUResponseDefaultTypeInternal _AUResponse_default_instance_;
class Err;
struct ErrDefaultTypeInternal;
extern ErrDefaultTypeInternal _Err_default_instance_;
class UACommand;
struct UACommandDefaultTypeInternal;
extern UACommandDefaultTypeInternal _UACommand_default_instance_;
class UAResponse;
struct UAResponseDefaultTypeInternal;
extern UAResponseDefaultTypeInternal _UAResponse_default_instance_;
class UDelivered;
struct UDeliveredDefaultTypeInternal;
extern UDeliveredDefaultTypeInternal _UDelivered_default_instance_;
class UTruckArrive;
struct UTruckArriveDefaultTypeInternal;
extern UTruckArriveDefaultTypeInternal _UTruckArrive_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AOrderATruck* Arena::CreateMaybeMessage<::AOrderATruck>(Arena*);
template<> ::AStartDeliver* Arena::CreateMaybeMessage<::AStartDeliver>(Arena*);
template<> ::AUCommand* Arena::CreateMaybeMessage<::AUCommand>(Arena*);
template<> ::AUResponse* Arena::CreateMaybeMessage<::AUResponse>(Arena*);
template<> ::Err* Arena::CreateMaybeMessage<::Err>(Arena*);
template<> ::UACommand* Arena::CreateMaybeMessage<::UACommand>(Arena*);
template<> ::UAResponse* Arena::CreateMaybeMessage<::UAResponse>(Arena*);
template<> ::UDelivered* Arena::CreateMaybeMessage<::UDelivered>(Arena*);
template<> ::UTruckArrive* Arena::CreateMaybeMessage<::UTruckArrive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Err final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Err) */ {
 public:
  inline Err() : Err(nullptr) {}
  ~Err() override;
  explicit PROTOBUF_CONSTEXPR Err(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Err(const Err& from);
  Err(Err&& from) noexcept
    : Err() {
    *this = ::std::move(from);
  }

  inline Err& operator=(const Err& from) {
    CopyFrom(from);
    return *this;
  }
  inline Err& operator=(Err&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Err& default_instance() {
    return *internal_default_instance();
  }
  static inline const Err* internal_default_instance() {
    return reinterpret_cast<const Err*>(
               &_Err_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Err& a, Err& b) {
    a.Swap(&b);
  }
  inline void Swap(Err* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Err* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Err* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Err>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Err& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Err& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Err* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Err";
  }
  protected:
  explicit Err(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrFieldNumber = 1,
    kOriginseqnumFieldNumber = 2,
    kSeqnumFieldNumber = 3,
  };
  // required string err = 1;
  bool has_err() const;
  private:
  bool _internal_has_err() const;
  public:
  void clear_err();
  const std::string& err() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err();
  PROTOBUF_NODISCARD std::string* release_err();
  void set_allocated_err(std::string* err);
  private:
  const std::string& _internal_err() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err(const std::string& value);
  std::string* _internal_mutable_err();
  public:

  // required int64 originseqnum = 2;
  bool has_originseqnum() const;
  private:
  bool _internal_has_originseqnum() const;
  public:
  void clear_originseqnum();
  int64_t originseqnum() const;
  void set_originseqnum(int64_t value);
  private:
  int64_t _internal_originseqnum() const;
  void _internal_set_originseqnum(int64_t value);
  public:

  // required int64 seqnum = 3;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  int64_t seqnum() const;
  void set_seqnum(int64_t value);
  private:
  int64_t _internal_seqnum() const;
  void _internal_set_seqnum(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Err)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_;
  int64_t originseqnum_;
  int64_t seqnum_;
  friend struct ::TableStruct_AUprotocolV3_2eproto;
};
// -------------------------------------------------------------------

class AOrderATruck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AOrderATruck) */ {
 public:
  inline AOrderATruck() : AOrderATruck(nullptr) {}
  ~AOrderATruck() override;
  explicit PROTOBUF_CONSTEXPR AOrderATruck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AOrderATruck(const AOrderATruck& from);
  AOrderATruck(AOrderATruck&& from) noexcept
    : AOrderATruck() {
    *this = ::std::move(from);
  }

  inline AOrderATruck& operator=(const AOrderATruck& from) {
    CopyFrom(from);
    return *this;
  }
  inline AOrderATruck& operator=(AOrderATruck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AOrderATruck& default_instance() {
    return *internal_default_instance();
  }
  static inline const AOrderATruck* internal_default_instance() {
    return reinterpret_cast<const AOrderATruck*>(
               &_AOrderATruck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AOrderATruck& a, AOrderATruck& b) {
    a.Swap(&b);
  }
  inline void Swap(AOrderATruck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AOrderATruck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AOrderATruck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AOrderATruck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AOrderATruck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AOrderATruck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AOrderATruck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AOrderATruck";
  }
  protected:
  explicit AOrderATruck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpsidFieldNumber = 7,
    kPackageidFieldNumber = 1,
    kWarehouselocationxFieldNumber = 2,
    kWarehouselocationyFieldNumber = 3,
    kWarehouseidFieldNumber = 4,
    kDestinationxFieldNumber = 5,
    kSeqnumFieldNumber = 8,
    kDestinationyFieldNumber = 6,
  };
  // optional string upsid = 7;
  bool has_upsid() const;
  private:
  bool _internal_has_upsid() const;
  public:
  void clear_upsid();
  const std::string& upsid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_upsid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_upsid();
  PROTOBUF_NODISCARD std::string* release_upsid();
  void set_allocated_upsid(std::string* upsid);
  private:
  const std::string& _internal_upsid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_upsid(const std::string& value);
  std::string* _internal_mutable_upsid();
  public:

  // required int64 packageid = 1;
  bool has_packageid() const;
  private:
  bool _internal_has_packageid() const;
  public:
  void clear_packageid();
  int64_t packageid() const;
  void set_packageid(int64_t value);
  private:
  int64_t _internal_packageid() const;
  void _internal_set_packageid(int64_t value);
  public:

  // required int32 warehouselocationx = 2;
  bool has_warehouselocationx() const;
  private:
  bool _internal_has_warehouselocationx() const;
  public:
  void clear_warehouselocationx();
  int32_t warehouselocationx() const;
  void set_warehouselocationx(int32_t value);
  private:
  int32_t _internal_warehouselocationx() const;
  void _internal_set_warehouselocationx(int32_t value);
  public:

  // required int32 warehouselocationy = 3;
  bool has_warehouselocationy() const;
  private:
  bool _internal_has_warehouselocationy() const;
  public:
  void clear_warehouselocationy();
  int32_t warehouselocationy() const;
  void set_warehouselocationy(int32_t value);
  private:
  int32_t _internal_warehouselocationy() const;
  void _internal_set_warehouselocationy(int32_t value);
  public:

  // required int32 warehouseid = 4;
  bool has_warehouseid() const;
  private:
  bool _internal_has_warehouseid() const;
  public:
  void clear_warehouseid();
  int32_t warehouseid() const;
  void set_warehouseid(int32_t value);
  private:
  int32_t _internal_warehouseid() const;
  void _internal_set_warehouseid(int32_t value);
  public:

  // required int32 destinationx = 5;
  bool has_destinationx() const;
  private:
  bool _internal_has_destinationx() const;
  public:
  void clear_destinationx();
  int32_t destinationx() const;
  void set_destinationx(int32_t value);
  private:
  int32_t _internal_destinationx() const;
  void _internal_set_destinationx(int32_t value);
  public:

  // required int64 seqnum = 8;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  int64_t seqnum() const;
  void set_seqnum(int64_t value);
  private:
  int64_t _internal_seqnum() const;
  void _internal_set_seqnum(int64_t value);
  public:

  // required int32 destinationy = 6;
  bool has_destinationy() const;
  private:
  bool _internal_has_destinationy() const;
  public:
  void clear_destinationy();
  int32_t destinationy() const;
  void set_destinationy(int32_t value);
  private:
  int32_t _internal_destinationy() const;
  void _internal_set_destinationy(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:AOrderATruck)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr upsid_;
  int64_t packageid_;
  int32_t warehouselocationx_;
  int32_t warehouselocationy_;
  int32_t warehouseid_;
  int32_t destinationx_;
  int64_t seqnum_;
  int32_t destinationy_;
  friend struct ::TableStruct_AUprotocolV3_2eproto;
};
// -------------------------------------------------------------------

class AStartDeliver final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AStartDeliver) */ {
 public:
  inline AStartDeliver() : AStartDeliver(nullptr) {}
  ~AStartDeliver() override;
  explicit PROTOBUF_CONSTEXPR AStartDeliver(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AStartDeliver(const AStartDeliver& from);
  AStartDeliver(AStartDeliver&& from) noexcept
    : AStartDeliver() {
    *this = ::std::move(from);
  }

  inline AStartDeliver& operator=(const AStartDeliver& from) {
    CopyFrom(from);
    return *this;
  }
  inline AStartDeliver& operator=(AStartDeliver&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AStartDeliver& default_instance() {
    return *internal_default_instance();
  }
  static inline const AStartDeliver* internal_default_instance() {
    return reinterpret_cast<const AStartDeliver*>(
               &_AStartDeliver_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AStartDeliver& a, AStartDeliver& b) {
    a.Swap(&b);
  }
  inline void Swap(AStartDeliver* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AStartDeliver* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AStartDeliver* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AStartDeliver>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AStartDeliver& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AStartDeliver& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AStartDeliver* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AStartDeliver";
  }
  protected:
  explicit AStartDeliver(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageidFieldNumber = 1,
    kSeqnumFieldNumber = 2,
  };
  // required int64 packageid = 1;
  bool has_packageid() const;
  private:
  bool _internal_has_packageid() const;
  public:
  void clear_packageid();
  int64_t packageid() const;
  void set_packageid(int64_t value);
  private:
  int64_t _internal_packageid() const;
  void _internal_set_packageid(int64_t value);
  public:

  // required int64 seqnum = 2;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  int64_t seqnum() const;
  void set_seqnum(int64_t value);
  private:
  int64_t _internal_seqnum() const;
  void _internal_set_seqnum(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:AStartDeliver)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t packageid_;
  int64_t seqnum_;
  friend struct ::TableStruct_AUprotocolV3_2eproto;
};
// -------------------------------------------------------------------

class AUCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AUCommand) */ {
 public:
  inline AUCommand() : AUCommand(nullptr) {}
  ~AUCommand() override;
  explicit PROTOBUF_CONSTEXPR AUCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AUCommand(const AUCommand& from);
  AUCommand(AUCommand&& from) noexcept
    : AUCommand() {
    *this = ::std::move(from);
  }

  inline AUCommand& operator=(const AUCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline AUCommand& operator=(AUCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AUCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const AUCommand* internal_default_instance() {
    return reinterpret_cast<const AUCommand*>(
               &_AUCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AUCommand& a, AUCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(AUCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AUCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AUCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AUCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AUCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AUCommand& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AUCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AUCommand";
  }
  protected:
  explicit AUCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeliverFieldNumber = 1,
    kOrderFieldNumber = 2,
    kAcksFieldNumber = 3,
    kErrorFieldNumber = 4,
  };
  // repeated .AStartDeliver deliver = 1;
  int deliver_size() const;
  private:
  int _internal_deliver_size() const;
  public:
  void clear_deliver();
  ::AStartDeliver* mutable_deliver(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AStartDeliver >*
      mutable_deliver();
  private:
  const ::AStartDeliver& _internal_deliver(int index) const;
  ::AStartDeliver* _internal_add_deliver();
  public:
  const ::AStartDeliver& deliver(int index) const;
  ::AStartDeliver* add_deliver();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AStartDeliver >&
      deliver() const;

  // repeated .AOrderATruck order = 2;
  int order_size() const;
  private:
  int _internal_order_size() const;
  public:
  void clear_order();
  ::AOrderATruck* mutable_order(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AOrderATruck >*
      mutable_order();
  private:
  const ::AOrderATruck& _internal_order(int index) const;
  ::AOrderATruck* _internal_add_order();
  public:
  const ::AOrderATruck& order(int index) const;
  ::AOrderATruck* add_order();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AOrderATruck >&
      order() const;

  // repeated int64 acks = 3;
  int acks_size() const;
  private:
  int _internal_acks_size() const;
  public:
  void clear_acks();
  private:
  int64_t _internal_acks(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_acks() const;
  void _internal_add_acks(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_acks();
  public:
  int64_t acks(int index) const;
  void set_acks(int index, int64_t value);
  void add_acks(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      acks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_acks();

  // repeated .Err error = 4;
  int error_size() const;
  private:
  int _internal_error_size() const;
  public:
  void clear_error();
  ::Err* mutable_error(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Err >*
      mutable_error();
  private:
  const ::Err& _internal_error(int index) const;
  ::Err* _internal_add_error();
  public:
  const ::Err& error(int index) const;
  ::Err* add_error();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Err >&
      error() const;

  // @@protoc_insertion_point(class_scope:AUCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AStartDeliver > deliver_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AOrderATruck > order_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > acks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Err > error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AUprotocolV3_2eproto;
};
// -------------------------------------------------------------------

class AUResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AUResponse) */ {
 public:
  inline AUResponse() : AUResponse(nullptr) {}
  ~AUResponse() override;
  explicit PROTOBUF_CONSTEXPR AUResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AUResponse(const AUResponse& from);
  AUResponse(AUResponse&& from) noexcept
    : AUResponse() {
    *this = ::std::move(from);
  }

  inline AUResponse& operator=(const AUResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AUResponse& operator=(AUResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AUResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AUResponse* internal_default_instance() {
    return reinterpret_cast<const AUResponse*>(
               &_AUResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AUResponse& a, AUResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AUResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AUResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AUResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AUResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AUResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AUResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AUResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AUResponse";
  }
  protected:
  explicit AUResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArriveFieldNumber = 1,
    kDeliveredFieldNumber = 2,
    kAcksFieldNumber = 3,
    kErrorFieldNumber = 4,
  };
  // repeated .UTruckArrive arrive = 1;
  int arrive_size() const;
  private:
  int _internal_arrive_size() const;
  public:
  void clear_arrive();
  ::UTruckArrive* mutable_arrive(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UTruckArrive >*
      mutable_arrive();
  private:
  const ::UTruckArrive& _internal_arrive(int index) const;
  ::UTruckArrive* _internal_add_arrive();
  public:
  const ::UTruckArrive& arrive(int index) const;
  ::UTruckArrive* add_arrive();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UTruckArrive >&
      arrive() const;

  // repeated .UDelivered delivered = 2;
  int delivered_size() const;
  private:
  int _internal_delivered_size() const;
  public:
  void clear_delivered();
  ::UDelivered* mutable_delivered(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UDelivered >*
      mutable_delivered();
  private:
  const ::UDelivered& _internal_delivered(int index) const;
  ::UDelivered* _internal_add_delivered();
  public:
  const ::UDelivered& delivered(int index) const;
  ::UDelivered* add_delivered();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UDelivered >&
      delivered() const;

  // repeated int64 acks = 3;
  int acks_size() const;
  private:
  int _internal_acks_size() const;
  public:
  void clear_acks();
  private:
  int64_t _internal_acks(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_acks() const;
  void _internal_add_acks(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_acks();
  public:
  int64_t acks(int index) const;
  void set_acks(int index, int64_t value);
  void add_acks(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      acks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_acks();

  // repeated .Err error = 4;
  int error_size() const;
  private:
  int _internal_error_size() const;
  public:
  void clear_error();
  ::Err* mutable_error(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Err >*
      mutable_error();
  private:
  const ::Err& _internal_error(int index) const;
  ::Err* _internal_add_error();
  public:
  const ::Err& error(int index) const;
  ::Err* add_error();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Err >&
      error() const;

  // @@protoc_insertion_point(class_scope:AUResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UTruckArrive > arrive_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UDelivered > delivered_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > acks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Err > error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AUprotocolV3_2eproto;
};
// -------------------------------------------------------------------

class UTruckArrive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UTruckArrive) */ {
 public:
  inline UTruckArrive() : UTruckArrive(nullptr) {}
  ~UTruckArrive() override;
  explicit PROTOBUF_CONSTEXPR UTruckArrive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UTruckArrive(const UTruckArrive& from);
  UTruckArrive(UTruckArrive&& from) noexcept
    : UTruckArrive() {
    *this = ::std::move(from);
  }

  inline UTruckArrive& operator=(const UTruckArrive& from) {
    CopyFrom(from);
    return *this;
  }
  inline UTruckArrive& operator=(UTruckArrive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UTruckArrive& default_instance() {
    return *internal_default_instance();
  }
  static inline const UTruckArrive* internal_default_instance() {
    return reinterpret_cast<const UTruckArrive*>(
               &_UTruckArrive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UTruckArrive& a, UTruckArrive& b) {
    a.Swap(&b);
  }
  inline void Swap(UTruckArrive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UTruckArrive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UTruckArrive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UTruckArrive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UTruckArrive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UTruckArrive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UTruckArrive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UTruckArrive";
  }
  protected:
  explicit UTruckArrive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeqnumFieldNumber = 3,
    kPackageidFieldNumber = 1,
    kTruckidFieldNumber = 2,
  };
  // repeated int64 seqnum = 3;
  int seqnum_size() const;
  private:
  int _internal_seqnum_size() const;
  public:
  void clear_seqnum();
  private:
  int64_t _internal_seqnum(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_seqnum() const;
  void _internal_add_seqnum(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_seqnum();
  public:
  int64_t seqnum(int index) const;
  void set_seqnum(int index, int64_t value);
  void add_seqnum(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      seqnum() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_seqnum();

  // required int64 packageid = 1;
  bool has_packageid() const;
  private:
  bool _internal_has_packageid() const;
  public:
  void clear_packageid();
  int64_t packageid() const;
  void set_packageid(int64_t value);
  private:
  int64_t _internal_packageid() const;
  void _internal_set_packageid(int64_t value);
  public:

  // required int32 truckid = 2;
  bool has_truckid() const;
  private:
  bool _internal_has_truckid() const;
  public:
  void clear_truckid();
  int32_t truckid() const;
  void set_truckid(int32_t value);
  private:
  int32_t _internal_truckid() const;
  void _internal_set_truckid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:UTruckArrive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > seqnum_;
  int64_t packageid_;
  int32_t truckid_;
  friend struct ::TableStruct_AUprotocolV3_2eproto;
};
// -------------------------------------------------------------------

class UDelivered final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UDelivered) */ {
 public:
  inline UDelivered() : UDelivered(nullptr) {}
  ~UDelivered() override;
  explicit PROTOBUF_CONSTEXPR UDelivered(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UDelivered(const UDelivered& from);
  UDelivered(UDelivered&& from) noexcept
    : UDelivered() {
    *this = ::std::move(from);
  }

  inline UDelivered& operator=(const UDelivered& from) {
    CopyFrom(from);
    return *this;
  }
  inline UDelivered& operator=(UDelivered&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UDelivered& default_instance() {
    return *internal_default_instance();
  }
  static inline const UDelivered* internal_default_instance() {
    return reinterpret_cast<const UDelivered*>(
               &_UDelivered_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UDelivered& a, UDelivered& b) {
    a.Swap(&b);
  }
  inline void Swap(UDelivered* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UDelivered* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UDelivered* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UDelivered>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UDelivered& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UDelivered& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UDelivered* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UDelivered";
  }
  protected:
  explicit UDelivered(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageidFieldNumber = 1,
    kSeqnumFieldNumber = 2,
  };
  // required int64 packageid = 1;
  bool has_packageid() const;
  private:
  bool _internal_has_packageid() const;
  public:
  void clear_packageid();
  int64_t packageid() const;
  void set_packageid(int64_t value);
  private:
  int64_t _internal_packageid() const;
  void _internal_set_packageid(int64_t value);
  public:

  // required int64 seqnum = 2;
  bool has_seqnum() const;
  private:
  bool _internal_has_seqnum() const;
  public:
  void clear_seqnum();
  int64_t seqnum() const;
  void set_seqnum(int64_t value);
  private:
  int64_t _internal_seqnum() const;
  void _internal_set_seqnum(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:UDelivered)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t packageid_;
  int64_t seqnum_;
  friend struct ::TableStruct_AUprotocolV3_2eproto;
};
// -------------------------------------------------------------------

class UACommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UACommand) */ {
 public:
  inline UACommand() : UACommand(nullptr) {}
  ~UACommand() override;
  explicit PROTOBUF_CONSTEXPR UACommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UACommand(const UACommand& from);
  UACommand(UACommand&& from) noexcept
    : UACommand() {
    *this = ::std::move(from);
  }

  inline UACommand& operator=(const UACommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline UACommand& operator=(UACommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UACommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const UACommand* internal_default_instance() {
    return reinterpret_cast<const UACommand*>(
               &_UACommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UACommand& a, UACommand& b) {
    a.Swap(&b);
  }
  inline void Swap(UACommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UACommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UACommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UACommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UACommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UACommand& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UACommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UACommand";
  }
  protected:
  explicit UACommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArriveFieldNumber = 1,
    kDeliveredFieldNumber = 2,
    kAcksFieldNumber = 3,
    kErrorFieldNumber = 4,
  };
  // repeated .UTruckArrive arrive = 1;
  int arrive_size() const;
  private:
  int _internal_arrive_size() const;
  public:
  void clear_arrive();
  ::UTruckArrive* mutable_arrive(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UTruckArrive >*
      mutable_arrive();
  private:
  const ::UTruckArrive& _internal_arrive(int index) const;
  ::UTruckArrive* _internal_add_arrive();
  public:
  const ::UTruckArrive& arrive(int index) const;
  ::UTruckArrive* add_arrive();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UTruckArrive >&
      arrive() const;

  // repeated .UDelivered delivered = 2;
  int delivered_size() const;
  private:
  int _internal_delivered_size() const;
  public:
  void clear_delivered();
  ::UDelivered* mutable_delivered(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UDelivered >*
      mutable_delivered();
  private:
  const ::UDelivered& _internal_delivered(int index) const;
  ::UDelivered* _internal_add_delivered();
  public:
  const ::UDelivered& delivered(int index) const;
  ::UDelivered* add_delivered();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UDelivered >&
      delivered() const;

  // repeated int64 acks = 3;
  int acks_size() const;
  private:
  int _internal_acks_size() const;
  public:
  void clear_acks();
  private:
  int64_t _internal_acks(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_acks() const;
  void _internal_add_acks(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_acks();
  public:
  int64_t acks(int index) const;
  void set_acks(int index, int64_t value);
  void add_acks(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      acks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_acks();

  // repeated .Err error = 4;
  int error_size() const;
  private:
  int _internal_error_size() const;
  public:
  void clear_error();
  ::Err* mutable_error(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Err >*
      mutable_error();
  private:
  const ::Err& _internal_error(int index) const;
  ::Err* _internal_add_error();
  public:
  const ::Err& error(int index) const;
  ::Err* add_error();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Err >&
      error() const;

  // @@protoc_insertion_point(class_scope:UACommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UTruckArrive > arrive_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UDelivered > delivered_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > acks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Err > error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AUprotocolV3_2eproto;
};
// -------------------------------------------------------------------

class UAResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UAResponse) */ {
 public:
  inline UAResponse() : UAResponse(nullptr) {}
  ~UAResponse() override;
  explicit PROTOBUF_CONSTEXPR UAResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UAResponse(const UAResponse& from);
  UAResponse(UAResponse&& from) noexcept
    : UAResponse() {
    *this = ::std::move(from);
  }

  inline UAResponse& operator=(const UAResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UAResponse& operator=(UAResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UAResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UAResponse* internal_default_instance() {
    return reinterpret_cast<const UAResponse*>(
               &_UAResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UAResponse& a, UAResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UAResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UAResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UAResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UAResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UAResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UAResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UAResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UAResponse";
  }
  protected:
  explicit UAResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeliverFieldNumber = 1,
    kOrderFieldNumber = 2,
    kAcksFieldNumber = 3,
    kErrorFieldNumber = 4,
  };
  // repeated .AStartDeliver deliver = 1;
  int deliver_size() const;
  private:
  int _internal_deliver_size() const;
  public:
  void clear_deliver();
  ::AStartDeliver* mutable_deliver(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AStartDeliver >*
      mutable_deliver();
  private:
  const ::AStartDeliver& _internal_deliver(int index) const;
  ::AStartDeliver* _internal_add_deliver();
  public:
  const ::AStartDeliver& deliver(int index) const;
  ::AStartDeliver* add_deliver();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AStartDeliver >&
      deliver() const;

  // repeated .AOrderATruck order = 2;
  int order_size() const;
  private:
  int _internal_order_size() const;
  public:
  void clear_order();
  ::AOrderATruck* mutable_order(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AOrderATruck >*
      mutable_order();
  private:
  const ::AOrderATruck& _internal_order(int index) const;
  ::AOrderATruck* _internal_add_order();
  public:
  const ::AOrderATruck& order(int index) const;
  ::AOrderATruck* add_order();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AOrderATruck >&
      order() const;

  // repeated int64 acks = 3;
  int acks_size() const;
  private:
  int _internal_acks_size() const;
  public:
  void clear_acks();
  private:
  int64_t _internal_acks(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_acks() const;
  void _internal_add_acks(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_acks();
  public:
  int64_t acks(int index) const;
  void set_acks(int index, int64_t value);
  void add_acks(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      acks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_acks();

  // repeated .Err error = 4;
  int error_size() const;
  private:
  int _internal_error_size() const;
  public:
  void clear_error();
  ::Err* mutable_error(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Err >*
      mutable_error();
  private:
  const ::Err& _internal_error(int index) const;
  ::Err* _internal_add_error();
  public:
  const ::Err& error(int index) const;
  ::Err* add_error();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Err >&
      error() const;

  // @@protoc_insertion_point(class_scope:UAResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AStartDeliver > deliver_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AOrderATruck > order_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > acks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Err > error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AUprotocolV3_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Err

// required string err = 1;
inline bool Err::_internal_has_err() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Err::has_err() const {
  return _internal_has_err();
}
inline void Err::clear_err() {
  err_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Err::err() const {
  // @@protoc_insertion_point(field_get:Err.err)
  return _internal_err();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Err::set_err(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 err_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Err.err)
}
inline std::string* Err::mutable_err() {
  std::string* _s = _internal_mutable_err();
  // @@protoc_insertion_point(field_mutable:Err.err)
  return _s;
}
inline const std::string& Err::_internal_err() const {
  return err_.Get();
}
inline void Err::_internal_set_err(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  err_.Set(value, GetArenaForAllocation());
}
inline std::string* Err::_internal_mutable_err() {
  _has_bits_[0] |= 0x00000001u;
  return err_.Mutable(GetArenaForAllocation());
}
inline std::string* Err::release_err() {
  // @@protoc_insertion_point(field_release:Err.err)
  if (!_internal_has_err()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = err_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_.IsDefault()) {
    err_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Err::set_allocated_err(std::string* err) {
  if (err != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  err_.SetAllocated(err, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_.IsDefault()) {
    err_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Err.err)
}

// required int64 originseqnum = 2;
inline bool Err::_internal_has_originseqnum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Err::has_originseqnum() const {
  return _internal_has_originseqnum();
}
inline void Err::clear_originseqnum() {
  originseqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t Err::_internal_originseqnum() const {
  return originseqnum_;
}
inline int64_t Err::originseqnum() const {
  // @@protoc_insertion_point(field_get:Err.originseqnum)
  return _internal_originseqnum();
}
inline void Err::_internal_set_originseqnum(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  originseqnum_ = value;
}
inline void Err::set_originseqnum(int64_t value) {
  _internal_set_originseqnum(value);
  // @@protoc_insertion_point(field_set:Err.originseqnum)
}

// required int64 seqnum = 3;
inline bool Err::_internal_has_seqnum() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Err::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void Err::clear_seqnum() {
  seqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t Err::_internal_seqnum() const {
  return seqnum_;
}
inline int64_t Err::seqnum() const {
  // @@protoc_insertion_point(field_get:Err.seqnum)
  return _internal_seqnum();
}
inline void Err::_internal_set_seqnum(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  seqnum_ = value;
}
inline void Err::set_seqnum(int64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:Err.seqnum)
}

// -------------------------------------------------------------------

// AOrderATruck

// required int64 packageid = 1;
inline bool AOrderATruck::_internal_has_packageid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AOrderATruck::has_packageid() const {
  return _internal_has_packageid();
}
inline void AOrderATruck::clear_packageid() {
  packageid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t AOrderATruck::_internal_packageid() const {
  return packageid_;
}
inline int64_t AOrderATruck::packageid() const {
  // @@protoc_insertion_point(field_get:AOrderATruck.packageid)
  return _internal_packageid();
}
inline void AOrderATruck::_internal_set_packageid(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  packageid_ = value;
}
inline void AOrderATruck::set_packageid(int64_t value) {
  _internal_set_packageid(value);
  // @@protoc_insertion_point(field_set:AOrderATruck.packageid)
}

// required int32 warehouselocationx = 2;
inline bool AOrderATruck::_internal_has_warehouselocationx() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AOrderATruck::has_warehouselocationx() const {
  return _internal_has_warehouselocationx();
}
inline void AOrderATruck::clear_warehouselocationx() {
  warehouselocationx_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t AOrderATruck::_internal_warehouselocationx() const {
  return warehouselocationx_;
}
inline int32_t AOrderATruck::warehouselocationx() const {
  // @@protoc_insertion_point(field_get:AOrderATruck.warehouselocationx)
  return _internal_warehouselocationx();
}
inline void AOrderATruck::_internal_set_warehouselocationx(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  warehouselocationx_ = value;
}
inline void AOrderATruck::set_warehouselocationx(int32_t value) {
  _internal_set_warehouselocationx(value);
  // @@protoc_insertion_point(field_set:AOrderATruck.warehouselocationx)
}

// required int32 warehouselocationy = 3;
inline bool AOrderATruck::_internal_has_warehouselocationy() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AOrderATruck::has_warehouselocationy() const {
  return _internal_has_warehouselocationy();
}
inline void AOrderATruck::clear_warehouselocationy() {
  warehouselocationy_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t AOrderATruck::_internal_warehouselocationy() const {
  return warehouselocationy_;
}
inline int32_t AOrderATruck::warehouselocationy() const {
  // @@protoc_insertion_point(field_get:AOrderATruck.warehouselocationy)
  return _internal_warehouselocationy();
}
inline void AOrderATruck::_internal_set_warehouselocationy(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  warehouselocationy_ = value;
}
inline void AOrderATruck::set_warehouselocationy(int32_t value) {
  _internal_set_warehouselocationy(value);
  // @@protoc_insertion_point(field_set:AOrderATruck.warehouselocationy)
}

// required int32 warehouseid = 4;
inline bool AOrderATruck::_internal_has_warehouseid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AOrderATruck::has_warehouseid() const {
  return _internal_has_warehouseid();
}
inline void AOrderATruck::clear_warehouseid() {
  warehouseid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t AOrderATruck::_internal_warehouseid() const {
  return warehouseid_;
}
inline int32_t AOrderATruck::warehouseid() const {
  // @@protoc_insertion_point(field_get:AOrderATruck.warehouseid)
  return _internal_warehouseid();
}
inline void AOrderATruck::_internal_set_warehouseid(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  warehouseid_ = value;
}
inline void AOrderATruck::set_warehouseid(int32_t value) {
  _internal_set_warehouseid(value);
  // @@protoc_insertion_point(field_set:AOrderATruck.warehouseid)
}

// required int32 destinationx = 5;
inline bool AOrderATruck::_internal_has_destinationx() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AOrderATruck::has_destinationx() const {
  return _internal_has_destinationx();
}
inline void AOrderATruck::clear_destinationx() {
  destinationx_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t AOrderATruck::_internal_destinationx() const {
  return destinationx_;
}
inline int32_t AOrderATruck::destinationx() const {
  // @@protoc_insertion_point(field_get:AOrderATruck.destinationx)
  return _internal_destinationx();
}
inline void AOrderATruck::_internal_set_destinationx(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  destinationx_ = value;
}
inline void AOrderATruck::set_destinationx(int32_t value) {
  _internal_set_destinationx(value);
  // @@protoc_insertion_point(field_set:AOrderATruck.destinationx)
}

// required int32 destinationy = 6;
inline bool AOrderATruck::_internal_has_destinationy() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AOrderATruck::has_destinationy() const {
  return _internal_has_destinationy();
}
inline void AOrderATruck::clear_destinationy() {
  destinationy_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline int32_t AOrderATruck::_internal_destinationy() const {
  return destinationy_;
}
inline int32_t AOrderATruck::destinationy() const {
  // @@protoc_insertion_point(field_get:AOrderATruck.destinationy)
  return _internal_destinationy();
}
inline void AOrderATruck::_internal_set_destinationy(int32_t value) {
  _has_bits_[0] |= 0x00000080u;
  destinationy_ = value;
}
inline void AOrderATruck::set_destinationy(int32_t value) {
  _internal_set_destinationy(value);
  // @@protoc_insertion_point(field_set:AOrderATruck.destinationy)
}

// optional string upsid = 7;
inline bool AOrderATruck::_internal_has_upsid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AOrderATruck::has_upsid() const {
  return _internal_has_upsid();
}
inline void AOrderATruck::clear_upsid() {
  upsid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AOrderATruck::upsid() const {
  // @@protoc_insertion_point(field_get:AOrderATruck.upsid)
  return _internal_upsid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AOrderATruck::set_upsid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 upsid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AOrderATruck.upsid)
}
inline std::string* AOrderATruck::mutable_upsid() {
  std::string* _s = _internal_mutable_upsid();
  // @@protoc_insertion_point(field_mutable:AOrderATruck.upsid)
  return _s;
}
inline const std::string& AOrderATruck::_internal_upsid() const {
  return upsid_.Get();
}
inline void AOrderATruck::_internal_set_upsid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  upsid_.Set(value, GetArenaForAllocation());
}
inline std::string* AOrderATruck::_internal_mutable_upsid() {
  _has_bits_[0] |= 0x00000001u;
  return upsid_.Mutable(GetArenaForAllocation());
}
inline std::string* AOrderATruck::release_upsid() {
  // @@protoc_insertion_point(field_release:AOrderATruck.upsid)
  if (!_internal_has_upsid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = upsid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (upsid_.IsDefault()) {
    upsid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AOrderATruck::set_allocated_upsid(std::string* upsid) {
  if (upsid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  upsid_.SetAllocated(upsid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (upsid_.IsDefault()) {
    upsid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AOrderATruck.upsid)
}

// required int64 seqnum = 8;
inline bool AOrderATruck::_internal_has_seqnum() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AOrderATruck::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void AOrderATruck::clear_seqnum() {
  seqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000040u;
}
inline int64_t AOrderATruck::_internal_seqnum() const {
  return seqnum_;
}
inline int64_t AOrderATruck::seqnum() const {
  // @@protoc_insertion_point(field_get:AOrderATruck.seqnum)
  return _internal_seqnum();
}
inline void AOrderATruck::_internal_set_seqnum(int64_t value) {
  _has_bits_[0] |= 0x00000040u;
  seqnum_ = value;
}
inline void AOrderATruck::set_seqnum(int64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:AOrderATruck.seqnum)
}

// -------------------------------------------------------------------

// AStartDeliver

// required int64 packageid = 1;
inline bool AStartDeliver::_internal_has_packageid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AStartDeliver::has_packageid() const {
  return _internal_has_packageid();
}
inline void AStartDeliver::clear_packageid() {
  packageid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t AStartDeliver::_internal_packageid() const {
  return packageid_;
}
inline int64_t AStartDeliver::packageid() const {
  // @@protoc_insertion_point(field_get:AStartDeliver.packageid)
  return _internal_packageid();
}
inline void AStartDeliver::_internal_set_packageid(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  packageid_ = value;
}
inline void AStartDeliver::set_packageid(int64_t value) {
  _internal_set_packageid(value);
  // @@protoc_insertion_point(field_set:AStartDeliver.packageid)
}

// required int64 seqnum = 2;
inline bool AStartDeliver::_internal_has_seqnum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AStartDeliver::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void AStartDeliver::clear_seqnum() {
  seqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t AStartDeliver::_internal_seqnum() const {
  return seqnum_;
}
inline int64_t AStartDeliver::seqnum() const {
  // @@protoc_insertion_point(field_get:AStartDeliver.seqnum)
  return _internal_seqnum();
}
inline void AStartDeliver::_internal_set_seqnum(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  seqnum_ = value;
}
inline void AStartDeliver::set_seqnum(int64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:AStartDeliver.seqnum)
}

// -------------------------------------------------------------------

// AUCommand

// repeated .AStartDeliver deliver = 1;
inline int AUCommand::_internal_deliver_size() const {
  return deliver_.size();
}
inline int AUCommand::deliver_size() const {
  return _internal_deliver_size();
}
inline void AUCommand::clear_deliver() {
  deliver_.Clear();
}
inline ::AStartDeliver* AUCommand::mutable_deliver(int index) {
  // @@protoc_insertion_point(field_mutable:AUCommand.deliver)
  return deliver_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AStartDeliver >*
AUCommand::mutable_deliver() {
  // @@protoc_insertion_point(field_mutable_list:AUCommand.deliver)
  return &deliver_;
}
inline const ::AStartDeliver& AUCommand::_internal_deliver(int index) const {
  return deliver_.Get(index);
}
inline const ::AStartDeliver& AUCommand::deliver(int index) const {
  // @@protoc_insertion_point(field_get:AUCommand.deliver)
  return _internal_deliver(index);
}
inline ::AStartDeliver* AUCommand::_internal_add_deliver() {
  return deliver_.Add();
}
inline ::AStartDeliver* AUCommand::add_deliver() {
  ::AStartDeliver* _add = _internal_add_deliver();
  // @@protoc_insertion_point(field_add:AUCommand.deliver)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AStartDeliver >&
AUCommand::deliver() const {
  // @@protoc_insertion_point(field_list:AUCommand.deliver)
  return deliver_;
}

// repeated .AOrderATruck order = 2;
inline int AUCommand::_internal_order_size() const {
  return order_.size();
}
inline int AUCommand::order_size() const {
  return _internal_order_size();
}
inline void AUCommand::clear_order() {
  order_.Clear();
}
inline ::AOrderATruck* AUCommand::mutable_order(int index) {
  // @@protoc_insertion_point(field_mutable:AUCommand.order)
  return order_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AOrderATruck >*
AUCommand::mutable_order() {
  // @@protoc_insertion_point(field_mutable_list:AUCommand.order)
  return &order_;
}
inline const ::AOrderATruck& AUCommand::_internal_order(int index) const {
  return order_.Get(index);
}
inline const ::AOrderATruck& AUCommand::order(int index) const {
  // @@protoc_insertion_point(field_get:AUCommand.order)
  return _internal_order(index);
}
inline ::AOrderATruck* AUCommand::_internal_add_order() {
  return order_.Add();
}
inline ::AOrderATruck* AUCommand::add_order() {
  ::AOrderATruck* _add = _internal_add_order();
  // @@protoc_insertion_point(field_add:AUCommand.order)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AOrderATruck >&
AUCommand::order() const {
  // @@protoc_insertion_point(field_list:AUCommand.order)
  return order_;
}

// repeated int64 acks = 3;
inline int AUCommand::_internal_acks_size() const {
  return acks_.size();
}
inline int AUCommand::acks_size() const {
  return _internal_acks_size();
}
inline void AUCommand::clear_acks() {
  acks_.Clear();
}
inline int64_t AUCommand::_internal_acks(int index) const {
  return acks_.Get(index);
}
inline int64_t AUCommand::acks(int index) const {
  // @@protoc_insertion_point(field_get:AUCommand.acks)
  return _internal_acks(index);
}
inline void AUCommand::set_acks(int index, int64_t value) {
  acks_.Set(index, value);
  // @@protoc_insertion_point(field_set:AUCommand.acks)
}
inline void AUCommand::_internal_add_acks(int64_t value) {
  acks_.Add(value);
}
inline void AUCommand::add_acks(int64_t value) {
  _internal_add_acks(value);
  // @@protoc_insertion_point(field_add:AUCommand.acks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AUCommand::_internal_acks() const {
  return acks_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AUCommand::acks() const {
  // @@protoc_insertion_point(field_list:AUCommand.acks)
  return _internal_acks();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AUCommand::_internal_mutable_acks() {
  return &acks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AUCommand::mutable_acks() {
  // @@protoc_insertion_point(field_mutable_list:AUCommand.acks)
  return _internal_mutable_acks();
}

// repeated .Err error = 4;
inline int AUCommand::_internal_error_size() const {
  return error_.size();
}
inline int AUCommand::error_size() const {
  return _internal_error_size();
}
inline void AUCommand::clear_error() {
  error_.Clear();
}
inline ::Err* AUCommand::mutable_error(int index) {
  // @@protoc_insertion_point(field_mutable:AUCommand.error)
  return error_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Err >*
AUCommand::mutable_error() {
  // @@protoc_insertion_point(field_mutable_list:AUCommand.error)
  return &error_;
}
inline const ::Err& AUCommand::_internal_error(int index) const {
  return error_.Get(index);
}
inline const ::Err& AUCommand::error(int index) const {
  // @@protoc_insertion_point(field_get:AUCommand.error)
  return _internal_error(index);
}
inline ::Err* AUCommand::_internal_add_error() {
  return error_.Add();
}
inline ::Err* AUCommand::add_error() {
  ::Err* _add = _internal_add_error();
  // @@protoc_insertion_point(field_add:AUCommand.error)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Err >&
AUCommand::error() const {
  // @@protoc_insertion_point(field_list:AUCommand.error)
  return error_;
}

// -------------------------------------------------------------------

// AUResponse

// repeated .UTruckArrive arrive = 1;
inline int AUResponse::_internal_arrive_size() const {
  return arrive_.size();
}
inline int AUResponse::arrive_size() const {
  return _internal_arrive_size();
}
inline void AUResponse::clear_arrive() {
  arrive_.Clear();
}
inline ::UTruckArrive* AUResponse::mutable_arrive(int index) {
  // @@protoc_insertion_point(field_mutable:AUResponse.arrive)
  return arrive_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UTruckArrive >*
AUResponse::mutable_arrive() {
  // @@protoc_insertion_point(field_mutable_list:AUResponse.arrive)
  return &arrive_;
}
inline const ::UTruckArrive& AUResponse::_internal_arrive(int index) const {
  return arrive_.Get(index);
}
inline const ::UTruckArrive& AUResponse::arrive(int index) const {
  // @@protoc_insertion_point(field_get:AUResponse.arrive)
  return _internal_arrive(index);
}
inline ::UTruckArrive* AUResponse::_internal_add_arrive() {
  return arrive_.Add();
}
inline ::UTruckArrive* AUResponse::add_arrive() {
  ::UTruckArrive* _add = _internal_add_arrive();
  // @@protoc_insertion_point(field_add:AUResponse.arrive)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UTruckArrive >&
AUResponse::arrive() const {
  // @@protoc_insertion_point(field_list:AUResponse.arrive)
  return arrive_;
}

// repeated .UDelivered delivered = 2;
inline int AUResponse::_internal_delivered_size() const {
  return delivered_.size();
}
inline int AUResponse::delivered_size() const {
  return _internal_delivered_size();
}
inline void AUResponse::clear_delivered() {
  delivered_.Clear();
}
inline ::UDelivered* AUResponse::mutable_delivered(int index) {
  // @@protoc_insertion_point(field_mutable:AUResponse.delivered)
  return delivered_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UDelivered >*
AUResponse::mutable_delivered() {
  // @@protoc_insertion_point(field_mutable_list:AUResponse.delivered)
  return &delivered_;
}
inline const ::UDelivered& AUResponse::_internal_delivered(int index) const {
  return delivered_.Get(index);
}
inline const ::UDelivered& AUResponse::delivered(int index) const {
  // @@protoc_insertion_point(field_get:AUResponse.delivered)
  return _internal_delivered(index);
}
inline ::UDelivered* AUResponse::_internal_add_delivered() {
  return delivered_.Add();
}
inline ::UDelivered* AUResponse::add_delivered() {
  ::UDelivered* _add = _internal_add_delivered();
  // @@protoc_insertion_point(field_add:AUResponse.delivered)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UDelivered >&
AUResponse::delivered() const {
  // @@protoc_insertion_point(field_list:AUResponse.delivered)
  return delivered_;
}

// repeated int64 acks = 3;
inline int AUResponse::_internal_acks_size() const {
  return acks_.size();
}
inline int AUResponse::acks_size() const {
  return _internal_acks_size();
}
inline void AUResponse::clear_acks() {
  acks_.Clear();
}
inline int64_t AUResponse::_internal_acks(int index) const {
  return acks_.Get(index);
}
inline int64_t AUResponse::acks(int index) const {
  // @@protoc_insertion_point(field_get:AUResponse.acks)
  return _internal_acks(index);
}
inline void AUResponse::set_acks(int index, int64_t value) {
  acks_.Set(index, value);
  // @@protoc_insertion_point(field_set:AUResponse.acks)
}
inline void AUResponse::_internal_add_acks(int64_t value) {
  acks_.Add(value);
}
inline void AUResponse::add_acks(int64_t value) {
  _internal_add_acks(value);
  // @@protoc_insertion_point(field_add:AUResponse.acks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AUResponse::_internal_acks() const {
  return acks_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AUResponse::acks() const {
  // @@protoc_insertion_point(field_list:AUResponse.acks)
  return _internal_acks();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AUResponse::_internal_mutable_acks() {
  return &acks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AUResponse::mutable_acks() {
  // @@protoc_insertion_point(field_mutable_list:AUResponse.acks)
  return _internal_mutable_acks();
}

// repeated .Err error = 4;
inline int AUResponse::_internal_error_size() const {
  return error_.size();
}
inline int AUResponse::error_size() const {
  return _internal_error_size();
}
inline void AUResponse::clear_error() {
  error_.Clear();
}
inline ::Err* AUResponse::mutable_error(int index) {
  // @@protoc_insertion_point(field_mutable:AUResponse.error)
  return error_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Err >*
AUResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable_list:AUResponse.error)
  return &error_;
}
inline const ::Err& AUResponse::_internal_error(int index) const {
  return error_.Get(index);
}
inline const ::Err& AUResponse::error(int index) const {
  // @@protoc_insertion_point(field_get:AUResponse.error)
  return _internal_error(index);
}
inline ::Err* AUResponse::_internal_add_error() {
  return error_.Add();
}
inline ::Err* AUResponse::add_error() {
  ::Err* _add = _internal_add_error();
  // @@protoc_insertion_point(field_add:AUResponse.error)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Err >&
AUResponse::error() const {
  // @@protoc_insertion_point(field_list:AUResponse.error)
  return error_;
}

// -------------------------------------------------------------------

// UTruckArrive

// required int64 packageid = 1;
inline bool UTruckArrive::_internal_has_packageid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UTruckArrive::has_packageid() const {
  return _internal_has_packageid();
}
inline void UTruckArrive::clear_packageid() {
  packageid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t UTruckArrive::_internal_packageid() const {
  return packageid_;
}
inline int64_t UTruckArrive::packageid() const {
  // @@protoc_insertion_point(field_get:UTruckArrive.packageid)
  return _internal_packageid();
}
inline void UTruckArrive::_internal_set_packageid(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  packageid_ = value;
}
inline void UTruckArrive::set_packageid(int64_t value) {
  _internal_set_packageid(value);
  // @@protoc_insertion_point(field_set:UTruckArrive.packageid)
}

// required int32 truckid = 2;
inline bool UTruckArrive::_internal_has_truckid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UTruckArrive::has_truckid() const {
  return _internal_has_truckid();
}
inline void UTruckArrive::clear_truckid() {
  truckid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t UTruckArrive::_internal_truckid() const {
  return truckid_;
}
inline int32_t UTruckArrive::truckid() const {
  // @@protoc_insertion_point(field_get:UTruckArrive.truckid)
  return _internal_truckid();
}
inline void UTruckArrive::_internal_set_truckid(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  truckid_ = value;
}
inline void UTruckArrive::set_truckid(int32_t value) {
  _internal_set_truckid(value);
  // @@protoc_insertion_point(field_set:UTruckArrive.truckid)
}

// repeated int64 seqnum = 3;
inline int UTruckArrive::_internal_seqnum_size() const {
  return seqnum_.size();
}
inline int UTruckArrive::seqnum_size() const {
  return _internal_seqnum_size();
}
inline void UTruckArrive::clear_seqnum() {
  seqnum_.Clear();
}
inline int64_t UTruckArrive::_internal_seqnum(int index) const {
  return seqnum_.Get(index);
}
inline int64_t UTruckArrive::seqnum(int index) const {
  // @@protoc_insertion_point(field_get:UTruckArrive.seqnum)
  return _internal_seqnum(index);
}
inline void UTruckArrive::set_seqnum(int index, int64_t value) {
  seqnum_.Set(index, value);
  // @@protoc_insertion_point(field_set:UTruckArrive.seqnum)
}
inline void UTruckArrive::_internal_add_seqnum(int64_t value) {
  seqnum_.Add(value);
}
inline void UTruckArrive::add_seqnum(int64_t value) {
  _internal_add_seqnum(value);
  // @@protoc_insertion_point(field_add:UTruckArrive.seqnum)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
UTruckArrive::_internal_seqnum() const {
  return seqnum_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
UTruckArrive::seqnum() const {
  // @@protoc_insertion_point(field_list:UTruckArrive.seqnum)
  return _internal_seqnum();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
UTruckArrive::_internal_mutable_seqnum() {
  return &seqnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
UTruckArrive::mutable_seqnum() {
  // @@protoc_insertion_point(field_mutable_list:UTruckArrive.seqnum)
  return _internal_mutable_seqnum();
}

// -------------------------------------------------------------------

// UDelivered

// required int64 packageid = 1;
inline bool UDelivered::_internal_has_packageid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UDelivered::has_packageid() const {
  return _internal_has_packageid();
}
inline void UDelivered::clear_packageid() {
  packageid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t UDelivered::_internal_packageid() const {
  return packageid_;
}
inline int64_t UDelivered::packageid() const {
  // @@protoc_insertion_point(field_get:UDelivered.packageid)
  return _internal_packageid();
}
inline void UDelivered::_internal_set_packageid(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  packageid_ = value;
}
inline void UDelivered::set_packageid(int64_t value) {
  _internal_set_packageid(value);
  // @@protoc_insertion_point(field_set:UDelivered.packageid)
}

// required int64 seqnum = 2;
inline bool UDelivered::_internal_has_seqnum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UDelivered::has_seqnum() const {
  return _internal_has_seqnum();
}
inline void UDelivered::clear_seqnum() {
  seqnum_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t UDelivered::_internal_seqnum() const {
  return seqnum_;
}
inline int64_t UDelivered::seqnum() const {
  // @@protoc_insertion_point(field_get:UDelivered.seqnum)
  return _internal_seqnum();
}
inline void UDelivered::_internal_set_seqnum(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  seqnum_ = value;
}
inline void UDelivered::set_seqnum(int64_t value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:UDelivered.seqnum)
}

// -------------------------------------------------------------------

// UACommand

// repeated .UTruckArrive arrive = 1;
inline int UACommand::_internal_arrive_size() const {
  return arrive_.size();
}
inline int UACommand::arrive_size() const {
  return _internal_arrive_size();
}
inline void UACommand::clear_arrive() {
  arrive_.Clear();
}
inline ::UTruckArrive* UACommand::mutable_arrive(int index) {
  // @@protoc_insertion_point(field_mutable:UACommand.arrive)
  return arrive_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UTruckArrive >*
UACommand::mutable_arrive() {
  // @@protoc_insertion_point(field_mutable_list:UACommand.arrive)
  return &arrive_;
}
inline const ::UTruckArrive& UACommand::_internal_arrive(int index) const {
  return arrive_.Get(index);
}
inline const ::UTruckArrive& UACommand::arrive(int index) const {
  // @@protoc_insertion_point(field_get:UACommand.arrive)
  return _internal_arrive(index);
}
inline ::UTruckArrive* UACommand::_internal_add_arrive() {
  return arrive_.Add();
}
inline ::UTruckArrive* UACommand::add_arrive() {
  ::UTruckArrive* _add = _internal_add_arrive();
  // @@protoc_insertion_point(field_add:UACommand.arrive)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UTruckArrive >&
UACommand::arrive() const {
  // @@protoc_insertion_point(field_list:UACommand.arrive)
  return arrive_;
}

// repeated .UDelivered delivered = 2;
inline int UACommand::_internal_delivered_size() const {
  return delivered_.size();
}
inline int UACommand::delivered_size() const {
  return _internal_delivered_size();
}
inline void UACommand::clear_delivered() {
  delivered_.Clear();
}
inline ::UDelivered* UACommand::mutable_delivered(int index) {
  // @@protoc_insertion_point(field_mutable:UACommand.delivered)
  return delivered_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UDelivered >*
UACommand::mutable_delivered() {
  // @@protoc_insertion_point(field_mutable_list:UACommand.delivered)
  return &delivered_;
}
inline const ::UDelivered& UACommand::_internal_delivered(int index) const {
  return delivered_.Get(index);
}
inline const ::UDelivered& UACommand::delivered(int index) const {
  // @@protoc_insertion_point(field_get:UACommand.delivered)
  return _internal_delivered(index);
}
inline ::UDelivered* UACommand::_internal_add_delivered() {
  return delivered_.Add();
}
inline ::UDelivered* UACommand::add_delivered() {
  ::UDelivered* _add = _internal_add_delivered();
  // @@protoc_insertion_point(field_add:UACommand.delivered)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UDelivered >&
UACommand::delivered() const {
  // @@protoc_insertion_point(field_list:UACommand.delivered)
  return delivered_;
}

// repeated int64 acks = 3;
inline int UACommand::_internal_acks_size() const {
  return acks_.size();
}
inline int UACommand::acks_size() const {
  return _internal_acks_size();
}
inline void UACommand::clear_acks() {
  acks_.Clear();
}
inline int64_t UACommand::_internal_acks(int index) const {
  return acks_.Get(index);
}
inline int64_t UACommand::acks(int index) const {
  // @@protoc_insertion_point(field_get:UACommand.acks)
  return _internal_acks(index);
}
inline void UACommand::set_acks(int index, int64_t value) {
  acks_.Set(index, value);
  // @@protoc_insertion_point(field_set:UACommand.acks)
}
inline void UACommand::_internal_add_acks(int64_t value) {
  acks_.Add(value);
}
inline void UACommand::add_acks(int64_t value) {
  _internal_add_acks(value);
  // @@protoc_insertion_point(field_add:UACommand.acks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
UACommand::_internal_acks() const {
  return acks_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
UACommand::acks() const {
  // @@protoc_insertion_point(field_list:UACommand.acks)
  return _internal_acks();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
UACommand::_internal_mutable_acks() {
  return &acks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
UACommand::mutable_acks() {
  // @@protoc_insertion_point(field_mutable_list:UACommand.acks)
  return _internal_mutable_acks();
}

// repeated .Err error = 4;
inline int UACommand::_internal_error_size() const {
  return error_.size();
}
inline int UACommand::error_size() const {
  return _internal_error_size();
}
inline void UACommand::clear_error() {
  error_.Clear();
}
inline ::Err* UACommand::mutable_error(int index) {
  // @@protoc_insertion_point(field_mutable:UACommand.error)
  return error_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Err >*
UACommand::mutable_error() {
  // @@protoc_insertion_point(field_mutable_list:UACommand.error)
  return &error_;
}
inline const ::Err& UACommand::_internal_error(int index) const {
  return error_.Get(index);
}
inline const ::Err& UACommand::error(int index) const {
  // @@protoc_insertion_point(field_get:UACommand.error)
  return _internal_error(index);
}
inline ::Err* UACommand::_internal_add_error() {
  return error_.Add();
}
inline ::Err* UACommand::add_error() {
  ::Err* _add = _internal_add_error();
  // @@protoc_insertion_point(field_add:UACommand.error)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Err >&
UACommand::error() const {
  // @@protoc_insertion_point(field_list:UACommand.error)
  return error_;
}

// -------------------------------------------------------------------

// UAResponse

// repeated .AStartDeliver deliver = 1;
inline int UAResponse::_internal_deliver_size() const {
  return deliver_.size();
}
inline int UAResponse::deliver_size() const {
  return _internal_deliver_size();
}
inline void UAResponse::clear_deliver() {
  deliver_.Clear();
}
inline ::AStartDeliver* UAResponse::mutable_deliver(int index) {
  // @@protoc_insertion_point(field_mutable:UAResponse.deliver)
  return deliver_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AStartDeliver >*
UAResponse::mutable_deliver() {
  // @@protoc_insertion_point(field_mutable_list:UAResponse.deliver)
  return &deliver_;
}
inline const ::AStartDeliver& UAResponse::_internal_deliver(int index) const {
  return deliver_.Get(index);
}
inline const ::AStartDeliver& UAResponse::deliver(int index) const {
  // @@protoc_insertion_point(field_get:UAResponse.deliver)
  return _internal_deliver(index);
}
inline ::AStartDeliver* UAResponse::_internal_add_deliver() {
  return deliver_.Add();
}
inline ::AStartDeliver* UAResponse::add_deliver() {
  ::AStartDeliver* _add = _internal_add_deliver();
  // @@protoc_insertion_point(field_add:UAResponse.deliver)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AStartDeliver >&
UAResponse::deliver() const {
  // @@protoc_insertion_point(field_list:UAResponse.deliver)
  return deliver_;
}

// repeated .AOrderATruck order = 2;
inline int UAResponse::_internal_order_size() const {
  return order_.size();
}
inline int UAResponse::order_size() const {
  return _internal_order_size();
}
inline void UAResponse::clear_order() {
  order_.Clear();
}
inline ::AOrderATruck* UAResponse::mutable_order(int index) {
  // @@protoc_insertion_point(field_mutable:UAResponse.order)
  return order_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AOrderATruck >*
UAResponse::mutable_order() {
  // @@protoc_insertion_point(field_mutable_list:UAResponse.order)
  return &order_;
}
inline const ::AOrderATruck& UAResponse::_internal_order(int index) const {
  return order_.Get(index);
}
inline const ::AOrderATruck& UAResponse::order(int index) const {
  // @@protoc_insertion_point(field_get:UAResponse.order)
  return _internal_order(index);
}
inline ::AOrderATruck* UAResponse::_internal_add_order() {
  return order_.Add();
}
inline ::AOrderATruck* UAResponse::add_order() {
  ::AOrderATruck* _add = _internal_add_order();
  // @@protoc_insertion_point(field_add:UAResponse.order)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AOrderATruck >&
UAResponse::order() const {
  // @@protoc_insertion_point(field_list:UAResponse.order)
  return order_;
}

// repeated int64 acks = 3;
inline int UAResponse::_internal_acks_size() const {
  return acks_.size();
}
inline int UAResponse::acks_size() const {
  return _internal_acks_size();
}
inline void UAResponse::clear_acks() {
  acks_.Clear();
}
inline int64_t UAResponse::_internal_acks(int index) const {
  return acks_.Get(index);
}
inline int64_t UAResponse::acks(int index) const {
  // @@protoc_insertion_point(field_get:UAResponse.acks)
  return _internal_acks(index);
}
inline void UAResponse::set_acks(int index, int64_t value) {
  acks_.Set(index, value);
  // @@protoc_insertion_point(field_set:UAResponse.acks)
}
inline void UAResponse::_internal_add_acks(int64_t value) {
  acks_.Add(value);
}
inline void UAResponse::add_acks(int64_t value) {
  _internal_add_acks(value);
  // @@protoc_insertion_point(field_add:UAResponse.acks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
UAResponse::_internal_acks() const {
  return acks_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
UAResponse::acks() const {
  // @@protoc_insertion_point(field_list:UAResponse.acks)
  return _internal_acks();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
UAResponse::_internal_mutable_acks() {
  return &acks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
UAResponse::mutable_acks() {
  // @@protoc_insertion_point(field_mutable_list:UAResponse.acks)
  return _internal_mutable_acks();
}

// repeated .Err error = 4;
inline int UAResponse::_internal_error_size() const {
  return error_.size();
}
inline int UAResponse::error_size() const {
  return _internal_error_size();
}
inline void UAResponse::clear_error() {
  error_.Clear();
}
inline ::Err* UAResponse::mutable_error(int index) {
  // @@protoc_insertion_point(field_mutable:UAResponse.error)
  return error_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Err >*
UAResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable_list:UAResponse.error)
  return &error_;
}
inline const ::Err& UAResponse::_internal_error(int index) const {
  return error_.Get(index);
}
inline const ::Err& UAResponse::error(int index) const {
  // @@protoc_insertion_point(field_get:UAResponse.error)
  return _internal_error(index);
}
inline ::Err* UAResponse::_internal_add_error() {
  return error_.Add();
}
inline ::Err* UAResponse::add_error() {
  ::Err* _add = _internal_add_error();
  // @@protoc_insertion_point(field_add:UAResponse.error)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Err >&
UAResponse::error() const {
  // @@protoc_insertion_point(field_list:UAResponse.error)
  return error_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_AUprotocolV3_2eproto
